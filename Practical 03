#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;omp.h&gt;

#define THRESHOLD 1000

// Merge two sorted halves
void merge(int *arr, int start, int mid, int end) {
int *temp = (int *)malloc((end - start) * sizeof(int));
int i = start, j = mid, k = 0;

while (i &lt; mid &amp;&amp; j &lt; end) {
if (arr[i] &lt;= arr[j])
temp[k++] = arr[i++];
else
temp[k++] = arr[j++];
}
while (i &lt; mid) temp[k++] = arr[i++];
while (j &lt; end) temp[k++] = arr[j++];

for (i = start, k = 0; i &lt; end; i++, k++)
arr[i] = temp[k];

free(temp);
}

// Recursive parallel merge sort
void parallel_merge_sort(int *arr, int start, int end) {
if (end - start &lt;= THRESHOLD) {
// Insertion sort for small arrays
for (int i = start + 1; i &lt; end; i++) {
int key = arr[i];
int j = i - 1;
while (j &gt;= start &amp;&amp; arr[j] &gt; key)
arr[j + 1] = arr[j--];

arr[j + 1] = key;
}
return;
}

int mid = (start + end) / 2;

#pragma omp task
parallel_merge_sort(arr, start, mid);

#pragma omp task
parallel_merge_sort(arr, mid, end);

#pragma omp taskwait
merge(arr, start, mid, end);
}

int main() {
int n = 1000000;
int *arr = (int *)malloc(n * sizeof(int));

// Initialize array with random values
for (int i = 0; i &lt; n; i++)
arr[i] = rand() % 100000;

double start_time = omp_get_wtime();

#pragma omp parallel
{
#pragma omp single
parallel_merge_sort(arr, 0, n);
}

double end_time = omp_get_wtime();

printf(&quot;Sorting completed in %f seconds\n&quot;, end_time - start_time);

// Check if sorted
for (int i = 1; i &lt; n; i++) {
if (arr[i - 1] &gt; arr[i]) {
printf(&quot;Array not sorted properly.\n&quot;);
break;
}
}

free(arr);
return 0;
}
